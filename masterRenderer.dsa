var oContentMgr = App.getContentMgr();
var nTotalNumberOfInstances = App.scriptArgs[0];
oContentMgr.openFile('C:/assets/templates/masterTemplate.duf', false);

if (nTotalNumberOfInstances)
{
	var nInstanceNumber = App.instanceName();
	var oInputDirectory = new DzDir('C:/assets/input');
	var aCharacters = oInputDirectory.getFilesFromDir(['*_character.duf'], true);
	var aAnimations = oInputDirectory.getFilesFromDir(['*_animation.duf'], true);
	var aGear = oInputDirectory.getFilesFromDir(['*_gear.duf'], true);

	var oRenderMgr = App.getRenderMgr();
	var oIrayOptions = oRenderMgr.getRenderElementObjects()[1];
	var oEnvironmentOptionsPropertyGroups = oRenderMgr.getRenderElementObjects()[3].getPropertyGroups();
	var oRenderOptions = oRenderMgr.getRenderOptions();
	var oViewport = MainWindow.getViewportMgr().getActiveViewport().get3DViewport();
	var oActiveCanvasProperty = oIrayOptions.getPropertyGroups().findProperty('Active Canvas');
	var oDrawGroundProperty = oEnvironmentOptionsPropertyGroups.findProperty("Draw Ground");
	var oEnvironmentModeProperty = oEnvironmentOptionsPropertyGroups.findProperty("Environment Mode");
	var oSceneHelper = new DzSceneHelper();
	var nAngles = 16;
	var nFrameRate = 30;
	var nDEGREES_IN_CIRCLE = 360;
	var nDegrees = nDEGREES_IN_CIRCLE / nAngles;
	var nDAZ_TICKS = 4800;
	var nTicksPerFrame = nDAZ_TICKS / nFrameRate;
	var oRoot = Scene.findNodeByLabel('root');
	var oShadowPlane = Scene.findNodeByLabel('shadowPlane');

	/*********************************************************************/
	function getName(sFileName) // Obtain the desired name out of a filepath or filename.
	{
		return sFileName.split('/').pop().split('_')[0];
	}
	/*********************************************************************/
	function setMatte(bBool) // Set the Matte Parameter of a character and its children.
	{	
		if (oCharacterMatteParameter) oCharacterMatteParameter.setValue(bBool);
		
		for (var i = 0; i != aCharacterChildren.length; i++)
		{
			var oChildMatteParameter = aCharacterChildren[i].findPropertyByLabel('Enable Iray Matte');
			if (oChildMatteParameter) oChildMatteParameter.setValue(bBool);
		}
	}
	/*********************************************************************/
	function renderCore(sName, sAnimationName, bIsGear, bIsShadow)
	{
		if (aChildPropertyControllers) for (var i = 0; i != aChildPropertyControllers.length; i++) // then for each of the child property controllers...
		{
			/* 
			Use the name of the property in the "Custom" category to find the property to which to link it.
			e.g.,
			BowOnnaStick-StikkbowDrawn
			Default Bolt-Opacity Strength-shaft
			The the first value is the node label. The second value is the property label. The third value is the material name, and is optional.
			The owner of a property usually is a DzNode, but it might be a DzMorph. The DzNode method "findPropertyByLabel" won't work for properties owned by a DzMorph.
			The "findPropertyOnNodeByLabel" method in the DzSceneHelper convenience object must be used to accommodate this scenario.
			*/
			var oChildPropertyController = aChildPropertyControllers[i];
			var aTargetPropertyParameters = oChildPropertyController.name.split("-");
			var oTargetNode = Scene.findNodeByLabel(aTargetPropertyParameters[0]);
			var sTargetPropertyName = aTargetPropertyParameters[1];
			var sTargetMaterial = aTargetPropertyParameters[2];
			var oTarget;
			if (sTargetMaterial) oTarget = oSceneHelper.findPropertyOnMaterialByLabel(sTargetPropertyName, oTargetNode.getObject().getCurrentShape().findMaterial(sTargetMaterial));
			else oTarget = oSceneHelper.findPropertyOnNodeByLabel(sTargetPropertyName, oTargetNode);
			
			oTarget.linkTo(oChildPropertyController);
		}

		// variables that have to be determined when we start rendering
		var nFramesTotal = Scene.getPlayRange().end / nTicksPerFrame;

		for (var nAngle = 0; nAngle != nDEGREES_IN_CIRCLE; nAngle = nAngle + nDegrees) // Loop through each angle...
		{
			var nConstructAngle;
			switch (nAngle)
			{
				// Construct's 0 degrees is east, Daz is south.
				// Construct's degrees rotate counter-clockwise, Daz rotates clockwise.
				// Construct degrees range from -180 to 180, or 0 to 360, depending on the system. Daz can accept either but defaults to 0 to 360.
				case 0: nConstructAngle = 90;
					break;
				case 22.5: nConstructAngle = 67.5;
					break;
				case 45: nConstructAngle = 45;
					break;
				case 67.5: nConstructAngle = 22.5;
					break;
				case 90: nConstructAngle = 0;
					break;
				case 112.5: nConstructAngle = -22.5;
					break;
				case 135: nConstructAngle = -45;
					break;
				case 157.5: nConstructAngle = -67.5;
					break;
				case 180: nConstructAngle = -90;
					break;
				case 202.5: nConstructAngle = -112.5;
					break;
				case 225: nConstructAngle = -135;
					break;
				case 247.5: nConstructAngle = -157.5;
					break;
				case 270: nConstructAngle = 180;
					break;
				case 292.5: nConstructAngle = 157.5;
					break;
				case 315: nConstructAngle = 135;
					break;
				case 337.5: nConstructAngle = 112.5;
					break;
			}			
			for (var nFrame = 0; nFrame <= nFramesTotal; nFrame++) // Loop through each frame...
			{
				// subtract 1 from the instance number to make it 0 based.
				// if we subtract the 0-based instanced number from the frame,
				// then check if that number is divisible by the total number of instances,
				// we'll find out if the current instance should render the current frame.
				if ((nFrame - (nInstanceNumber - 1)) % nTotalNumberOfInstances != 0) continue;

				var sNameSuffix = '';
				if (bIsGear) sNameSuffix = '_gear';
				if (bIsShadow) sNameSuffix += '_shadow';

				var sFinalFilePath = 'C:/DaggerQuest/imagesStaging/' + sName + sNameSuffix  + '-' + sAnimationName + '_' + nConstructAngle + '-' + ("000"+ nFrame).slice(-3) + '.png';

				// if (oInputDirectory.exists(sFinalFilePath)) continue; // Set the filepath. If it already exists, skip it.
				oRenderOptions.renderImgFilename = sFinalFilePath;

				Scene.setFrame(nFrame);
				oRoot.getYRotControl().setValue(nAngle); // Do this every frame, or else it will interpolate.

				if (bIsShadow)
				{
					oEnvironmentModeProperty.setValue(3); // Scene Only
					oDrawGroundProperty.setValue(true);
					oShadowPlane.setVisible(true);
					oActiveCanvasProperty.setValue(0);
					if (bIsGear) setMatte(true);
				}
				else
				{
					oEnvironmentModeProperty.setValue(2); // Sun-Sky Only
					oDrawGroundProperty.setValue(false);
					oShadowPlane.setVisible(false);
					setMatte(false);
					if (bIsGear) oActiveCanvasProperty.setValue(1);
				}
				
				while(backgroundProgressIsActive()) processEvents();		// Wait for everything else to finish first, specifically the mesh smoother, then render.
				oRenderMgr.doRender();

				var oCanvasDirectory = DzDir(sFinalFilePath.replace('.png', '_canvases'));

				if (oCanvasDirectory.exists())  // If a canvases were made, delete all of them, then delete the canvas folder.
				{
					var aCanvases = oCanvasDirectory.getFilesFromDir(['*.exr'], true); 
					for (var i = 0; i != aCanvases.length; i++) oCanvasDirectory.remove(aCanvases[i]);
					oCanvasDirectory.rmdir();
				}
			}
		}
	}

	sleep(5000); // this prevents a postgre database error when opening multiple instances of Daz quickly

	if (nTotalNumberOfInstances > nInstanceNumber) App.showURL('file:///C:/DaggerQuest/masterRenderer.lnk');

	/*********************************************************************

								RENDER LOOPS

	*********************************************************************/
	for (var i = 0; i != aCharacters.length; i++) // For each character...
	{
		oContentMgr.openFile(aCharacters[i], true);		// Merge in a character, and get its name.
		var sCharacterName = getName(aCharacters[i]);

		var oCharacter = Scene.findNodeByLabel('character');		// Set up the character.
		var aCharacterChildren = oCharacter.getNodeChildren(true);
		var oCharacterMatteParameter = oCharacter.findPropertyByLabel('Enable Iray Matte');
		var oCustomPropertyGroup = oCharacter.getPropertyGroups().findChild("Custom");
		var aChildPropertyControllers;
		if (oCustomPropertyGroup) aChildPropertyControllers = oCustomPropertyGroup.getAllProperties();

		oRoot.addNodeChild(oCharacter, true);

		if (!aAnimations.length)
		{
			renderCore(sCharacterName, 'Animation 1', false, false);

			renderCore(sCharacterName, 'Animation 1', false, true);
		}
		else for (var j = 0; j != aAnimations.length; j++) // For each animation...
		{
			oContentMgr.openFile(aAnimations[j], true); // only the character can be selected when we merge in an animation

			var sAnimationName = getName(aAnimations[j]);

			if (!aGear.length) // If there is no gear...
			{
				renderCore(sCharacterName, sAnimationName, false, false);

				renderCore(sCharacterName, sAnimationName, false, true);
			}
			else for (var k = 0; k != aGear.length; k++) // If there are gears, for each gear...
			{
				oContentMgr.openFile(aGear[k], true);
				var sGearName = getName(aGear[k]);
				var oGear = Scene.findNodeByLabel('gear');

				var aGearChildren = oGear.getNodeChildren(false);

				oIrayOptions.addNodeToNodeList('visibleNodes', oGear); // Add the gear to the canvas.
				
				for (var ii = 0; ii != aGearChildren.length; ii++) oIrayOptions.addNodeToNodeList('visibleNodes', aGearChildren[ii]); // Add all gear children to the canvas as well.

				renderCore(sCharacterName + '_' + sGearName, sAnimationName, true, false);
				
				renderCore(sCharacterName + '_' + sGearName, sAnimationName, true, true);

				Scene.removeNode(oGear);
			}
			// Custom parameter keys don't always exist. They have to be manually cleared after each animation
			for (var i = 0; i != aChildPropertyControllers.length; i++) aChildPropertyControllers[i].deleteAllKeys();

			Scene.setPlayRange(DzTimeRange(0, 0));
		}
		Scene.removeNode(oCharacter);
	}
}